openapi: 3.0.0
info:
  description: This is the REST API used as an communication layer between backend and frontend.
  version: "1.1.0"
  title: GameBase Communication API
  contact:
    email: gamebase@gahr.dev
    url: https://gahr.dev
externalDocs:
  description: Learn more about GameBase
  url: https://blog.game-base.de
servers:
  - description: Dev Backend version of REST service
    url: https://api.dev.game-base.de
  - description: Live Backend version of REST service
    url: https://api.game-base.de/
tags:
  - name: api
    description: REST API v1
paths:
  /api:
    get:
      tags:
        - api
      summary: Query status of all deployments
      operationId: getStatus
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameServerStatus'
                  
        '404':
          description: Containers' status could not be fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
                  
  '/api/start/{id}':
    get:
      tags:
        - api
      summary: Start a game server/container
      operationId: startContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to start
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Start successful
                  
        '500':
          description: Start failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
                  
  '/api/stop/{id}':
    get:
      tags:
        - api
      summary: Stop a game server/container
      operationId: stopContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to stop
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stop successful
                  
        '500':
          description: Stop failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
                  
  '/api/restart/{id}':
    get:
      tags:
        - api
      summary: Restart a game server/container
      operationId: restartContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to restart
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Restart successful

        '500':
          description: Restart failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
                
  /api/deploy:
    post:
      tags:
        - api
      summary: Deploy a game server based on POST body
      operationId: deployContainer
      responses:
        '201':
          description: Deployment successful

        '500':
          description: Deployment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
                
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/GameServerDeployTemplate'
        
  /api/configure:
    post:
      tags:
        - api
      summary: Configure a game server based on POST body
      operationId: configureContainer
      responses:
        '201':
          description: Configuration successful

        '500':
          description: Configuration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/GameServerConfigurationTemplate'
        
  '/api/destroy/{id}':
    delete:
      tags:
        - api
      summary: Delete deployment of game server
      operationId: deleteContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deletion successful
          
        '500':
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  /api/listimages:
    get:
      tags:
        - api
      summary: Get a list of all available game server images
      operationId: listImages
      responses:
        '200':
          description: Query successful
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GameServerImages'
                  
        '503':
          description: Query failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

components:
  schemas:
    Status:
      type: integer
      enum: 
        - unknown
        - running
        - restarting
        - stopped
        - error
      default: unknown
    Exception:
      type: object
      required:
        - exception
        - details
      properties:
        id:
          type: string
          description: ID of container causing this exception
        exception:
          type: string
          description: Short Exception code
        details:
          type: string
          description: Detailed message of issue
    GameServerStatus:
      type: object
      required:
        - id
        - gameTag
        - image
        - status
        - ports
      properties:
        id:
          type: string
          description: ID of container
        gameTag:
          type: string
          description: Indentifier of game
        image:
          type: string
          description: Image used in Docker
        status:
          description: Status of container
          oneOf:
            - $ref: '#/components/schemas/Status'
        ports:
          type: array
          items:
            type: integer
            format: int16
          description: Ports used by game server
        slots:
          type: integer
          description: Max. players allowed
        playerCount:
          type: integer
          description: Current players on server
        map:
          type: string
        mapRotation:
          type: array
          items:
            type: string
    GameServerDeployTemplate:
      type: object
      required:
      - image
      - ownerId
      properties:
        image:
          type: string
          description: Docker image of game server
        ownerId:
          type: string
          format: uuid
          description: UUID of owner whom this server belongs to
    GameServerConfigurationTemplate:
      type: object
      required:
      - details
      - resources.image
      properties:
        details:
          type: object
          description: General details of server
          properties:
            serverName:
              type: string
              description: Name of server that will displayed on one's Dashboard
            ownerId:
              type: string
              format: uuid
              description: UUID of owner whom this server belongs to
            description:
              type: string
              description: Short description of server which will be displayed on one's Dashboard
        resources:
          type: object
          properties:
            image:
              type: string
              description: Docker image
            ports:
              type: object
              description: Ports to be allocated
              properties:
                tcp:
                  type: array
                  items:
                    type: integer
                    format: int16
                udp:
                  type: array
                  items:
                    type: integer
                    format: int16
            memory:
              type: integer
              description: Memory to be allocated
              default: -1
            startupArgs:
              type: string
              description: Command with arguments that will be run upon container creation/start
            restartBehavior:
              type: array
              items:
                type: string
                enum: 
                  - none
                  - unless-stopped
                  - on-failure
                  - always
                default: none
    GameServerImages:
      type: object
      properties:
        images:
          type: array
          description: List of images
          items:
            type: string
  requestBodies:
    GameServerDeployTemplate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameServerDeployTemplate'
      description: Game server template which will be used for server creation
      required: true
    GameServerConfigurationTemplate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameServerConfigurationTemplate'
      description: Configuration for game server
      required: true