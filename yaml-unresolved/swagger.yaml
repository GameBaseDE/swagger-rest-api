openapi: 3.0.0
info:
  description: This is the REST API used as an communication layer between backend and frontend.
  version: "2.2.0"
  title: GameBase Communication API
  contact:
    email: gamebase@gahr.dev
    url: https://gahr.dev
externalDocs:
  description: Learn more about GameBase
  url: https://blog.game-base.de
servers:
  - description: Dev Backend version of REST service
    url: https://dev.game-base.de
  - description: Live Backend version of REST service
    url: https://game-base.de
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/GameBase9/gamebase_communication_api/2.1.0
tags:
  - name: gameserver
    description: Game server and container management endpoints
  - name: auth
    description: Authentication endpoints
  - name: user
    description: User management endpoints
paths:
  /gs/status:
    get:
      security:
        - Bearer: []
      tags:
        - gameserver
      summary: Query status of all deployments
      operationId: getStatus
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameContainerStatus'

        '404':
          description: Containers' status could not be fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  '/gs/start/{id}':
    post:
      security:
        - Bearer: []
      tags:
        - gameserver
      summary: Start a game server/container
      operationId: startContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to start
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Start successful

        '500':
          description: Start failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  '/gs/stop/{id}':
    post:
      security:
        - Bearer: []
      tags:
        - gameserver
      summary: Stop a game server/container
      operationId: stopContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to stop
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stop successful

        '500':
          description: Stop failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  '/gs/restart/{id}':
    post:
      security:
        - Bearer: []
      tags:
        - gameserver
      summary: Restart a game server/container
      operationId: restartContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to restart
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Restart successful

        '500':
          description: Restart failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  /gs/deploy:
    post:
      security:
        - Bearer: []
      tags:
        - gameserver
      summary: Deploy a game server based on POST body
      operationId: deployContainer
      responses:
        '201':
          description: Deployment successful

        '500':
          description: Deployment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/GameContainerDeployment'

  '/gs/configure/{id}':
    post:
      security:
        - Bearer: []
      tags:
        - gameserver
      summary: Configure a game server based on POST body
      operationId: configureContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to configure
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Configuration successful

        '500':
          description: Configuration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/GameContainerConfiguration'

  '/gs/destroy/{id}':
    delete:
      security:
        - Bearer: []
      tags:
        - gameserver
      summary: Delete deployment of game server
      operationId: deleteContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deletion successful

        '500':
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  /gs/templates:
    get:
      security:
        - Bearer: []
      tags:
        - gameserver
      summary: Get a list of all available game server templates
      operationId: listTemplates
      responses:
        '200':
          description: Query successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

        '503':
          description: Query failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login a user and return a JWT with the user object
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '403':
          description: Login failed
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'

  /auth/register:
    post:
      tags:
        - auth
      summary: Register a user and return a JWT with the user object
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '403':
          description: Registration failed
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/UserRegister'

  /auth/logout:
    delete:
      security:
        - Bearer: []
      tags:
        - auth
      summary: Invalidate the passed JWT
      responses:
        '200':
          description: Logout successful
        '400':
          description: Invalid input

  /user/update:
    post:
      security:
        - Bearer: []
      tags:
        - user
      summary: Update fields of a user's profile
      operationId: updateUserProfile
      responses:
        '200':
          description: Successful operation

        '404':
          description: User's profile could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

      requestBody:
        $ref: '#/components/requestBodies/UserProfile'

components:
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
      description: |
        For accessing the API a valid JWT token must be passed in all the queries in
        the 'Authorization' header.
        A valid JWT token is generated by the API and retourned as answer of a call
        to the route /login giving a valid user & password.
        The following syntax must be used in the 'Authorization' header :
            Bearer xxxxxx.yyyyyyy.zzzzzz
  schemas:
    Status:
      type: string
      enum:
        - UNKNOWN
        - STARTING
        - RUNNING
        - STOPPED
        - ERROR
      default: UNKNOWN
    RestartBehavior:
      type: string
      enum:
        - none
        - unless-stopped
        - on-failure
        - always
      default: none
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: The password of the user
    UserRegister:
      type: object
      required:
        - email
        - password
        - confirmPassword
      properties:
        fullName:
          type: string
          description: Full name of the user
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: The password of the user
        confirmPassword:
          type: string
          description: The password confirmation of the user (must be equal to password)
    User:
      type: object
      required:
        - email
        - fullName
        - token
      properties:
        email:
          type: string
          description: Email address of the user
        fullName:
          type: string
          description: The full name of the user
        token:
          type: string
          description: The JWT of the users session
    UserProfile:
      type: object
      properties:
        username:
          type: string
          description: Username of the user
        email:
          type: string
          description: E-mail address of the user
        password:
          type: object
          properties:
            old:
              type: string
              description: Old password of the user as a confirmation step
            new:
              type: string
              description: New desired password of the user
        gravatar:
          type: string
          description: E-mail address of the Gravatar to be used
    Exception:
      type: object
      required:
        - exception
        - details
      properties:
        id:
          type: string
          description: ID of container causing this exception
        exception:
          type: string
          description: Short Exception code
        details:
          type: string
          description: Detailed message of issue

    GameContainerStatus:
      type: object
      properties:
        id:
          type: string
          description: ID of game server container
        status:
          $ref: '#/components/schemas/Status'
        configuration:
          $ref: '#/components/schemas/GameContainerConfiguration'
        gameServerDetails:
          $ref: '#/components/schemas/GameServerDetails'

    GameServerDetails:
      type: object
      description: Dynamic details by game server monitoring agent
      additionalProperties:
        type: string

    GameContainerDeployment:
      type: object
      required:
        - templatePath
      properties:
        templatePath:
          type: string
          description: Template path of backend directory that is going to be used for game container creation

    GameContainerConfiguration:
      type: object
      required:
        - details
        - resources.templatePath
      properties:
        details:
          type: object
          description: General details of server
          properties:
            serverName:
              type: string
              description: Name of server that will displayed on one's Dashboard
            description:
              type: string
              description: Short description of server which will be displayed on one's Dashboard
        resources:
          type: object
          properties:
            templatePath:
              type: string
              description: Template path of backend directory that is going to be used for game container creation
            ports:
              type: object
              description: Ports to be allocated
              properties:
                tcp:
                  type: array
                  items:
                    type: integer
                    format: int16
                udp:
                  type: array
                  items:
                    type: integer
                    format: int16
            memory:
              type: integer
              description: Memory to be allocated
              default: -1
            startupArgs:
              type: string
              description: Command with arguments that will be run upon container creation/start
            restartBehavior:
              $ref: '#/components/schemas/RestartBehavior'
            environmentVars:
              type: object
              description: Environment variables that configure the game server
              additionalProperties:
                type: string

  requestBodies:
    UserProfile:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProfile'
    UserLogin:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
    UserRegister:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegister'
    GameContainerDeployment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameContainerDeployment'
      description: Game server template which will be used for server creation
      required: true
    GameContainerConfiguration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameContainerConfiguration'
      description: Configuration for game server
      required: true