openapi: 3.0.0
info:
  description: This is the REST API used as an communication layer between backend and frontend.
  version: "1.1.0"
  title: GameBase Communication API
  contact:
    email: gamebase@gahr.dev
    url: https://gahr.dev
externalDocs:
  description: Learn more about GameBase
  url: https://blog.game-base.de
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/GameBase9/gamebase_communication_api/1.1.0
  - description: Dev Backend version of REST service
    url: https://dev.game-base.de
  - description: Live Backend version of REST service
    url: https://game-base.de
tags:
  - name: api
    description: REST API v1
paths:
  /api:
    get:
      security:
        - Bearer: []
      tags:
        - api
      summary: Query status of all deployments
      operationId: getStatus
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameServerStatus'

        '404':
          description: Containers' status could not be fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  '/api/start/{id}':
    get:
      security:
        - Bearer: []
      tags:
        - api
      summary: Start a game server/container
      operationId: startContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to start
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Start successful

        '500':
          description: Start failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  '/api/stop/{id}':
    get:
      security:
        - Bearer: []
      tags:
        - api
      summary: Stop a game server/container
      operationId: stopContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to stop
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stop successful

        '500':
          description: Stop failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  '/api/restart/{id}':
    get:
      security:
        - Bearer: []
      tags:
        - api
      summary: Restart a game server/container
      operationId: restartContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to restart
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Restart successful

        '500':
          description: Restart failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  /api/deploy:
    post:
      security:
        - Bearer: []
      tags:
        - api
      summary: Deploy a game server based on POST body
      operationId: deployContainer
      responses:
        '201':
          description: Deployment successful

        '500':
          description: Deployment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/GameServerDeployTemplate'

  /api/configure:
    post:
      security:
        - Bearer: []
      tags:
        - api
      summary: Configure a game server based on POST body
      operationId: configureContainer
      responses:
        '201':
          description: Configuration successful

        '500':
          description: Configuration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/GameServerConfigurationTemplate'

  '/api/destroy/{id}':
    delete:
      security:
        - Bearer: []
      tags:
        - api
      summary: Delete deployment of game server
      operationId: deleteContainer
      parameters:
        - name: id
          in: path
          description: ID of game server to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deletion successful

        '500':
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  /api/listimages:
    get:
      security:
        - Bearer: []
      tags:
        - api
      summary: Get a list of all available game server images
      operationId: listImages
      responses:
        '200':
          description: Query successful
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GameServerImages'

        '503':
          description: Query failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'

  /api/auth/login:
    post:
      tags:
        - api
      summary: Login a user and return a JWT with the user object
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '403':
          description: Login failed
        '400':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'

components:
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
      description: |
       For accessing the API a valid JWT token must be passed in all the queries in
       the 'Authorization' header.
       A valid JWT token is generated by the API and retourned as answer of a call
       to the route /login giving a valid user & password.
       The following syntax must be used in the 'Authorization' header :
           Bearer xxxxxx.yyyyyyy.zzzzzz
  schemas:
    Status:
      type: string
      enum:
        - UNKNOWN
        - RUNNING
        - STOPPED
        - RESTARTING
        - ERROR
      default: UNKNOWN
    RestartBehavior:
      type: string
      enum:
        - none
        - unless-stopped
        - on-failure
        - always
      default: none
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: The password of the user
    User:
      type: object
      required:
        - email
        - fullName
        - token
      properties:
        email:
          type: string
          description: Email address of the user
        fullName:
          type: string
          description: The full name of the user
        token:
          type: string
          description: The JWT of the users session
    Exception:
      type: object
      required:
        - exception
        - details
      properties:
        id:
          type: string
          description: ID of container causing this exception
        exception:
          type: string
          description: Short Exception code
        details:
          type: string
          description: Detailed message of issue
    GameServerStatus:
      type: object
      required:
        - id
        - gameTag
        - image
        - status
        - ports
      properties:
        id:
          type: string
          description: ID of container
        gameTag:
          type: string
          description: Indentifier of game
        ownerId:
          type: string
          format: uuid
          description: ID of server owner
        image:
          type: string
          description: Image used in Docker
        description:
          type: string
          description: Description of server to be displayed on Dashboard
        ports:
          type: object
          description: Allocated ports for server
          properties:
            tcp:
              type: array
              items:
                type: integer
                format: int16
            udp:
              type: array
              items:
                type: integer
                format: int16
        memory:
          type: integer
          description: Amount of memory in MB to be allocated for the server
        startupArgs:
          type: string
          description: Additional start up arguments that is appended or run on the game server
        restartBehavior:
          $ref: '#/components/schemas/RestartBehavior'
        status: 
          $ref: '#/components/schemas/Status'
        slots:
          type: integer
          description: Max. players allowed
        playerCount:
          type: integer
          description: Current players on server
        map:
          type: string
        mapRotation:
          type: array
          items:
            type: string
    GameServerDeployTemplate:
      type: object
      required:
        - image
        - ownerId
      properties:
        image:
          type: string
          description: Docker image of game server
        ownerId:
          type: string
          format: uuid
          description: UUID of owner whom this server belongs to
    GameServerConfigurationTemplate:
      type: object
      required:
        - details
        - resources.image
      properties:
        details:
          type: object
          description: General details of server
          properties:
            serverName:
              type: string
              description: Name of server that will displayed on one's Dashboard
            ownerId:
              type: string
              format: uuid
              description: UUID of owner whom this server belongs to
            description:
              type: string
              description: Short description of server which will be displayed on one's Dashboard
        resources:
          type: object
          properties:
            image:
              type: string
              description: Docker image
            ports:
              type: object
              description: Ports to be allocated
              properties:
                tcp:
                  type: array
                  items:
                    type: integer
                    format: int16
                udp:
                  type: array
                  items:
                    type: integer
                    format: int16
            memory:
              type: integer
              description: Memory to be allocated
              default: -1
            startupArgs:
              type: string
              description: Command with arguments that will be run upon container creation/start
            restartBehavior:
              $ref: '#/components/schemas/RestartBehavior'
    GameServerImages:
      type: object
      properties:
        images:
          type: array
          description: List of images
          items:
            type: string
  requestBodies:
    UserLogin:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
    GameServerDeployTemplate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameServerDeployTemplate'
      description: Game server template which will be used for server creation
      required: true
    GameServerConfigurationTemplate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameServerConfigurationTemplate'
      description: Configuration for game server
      required: true