openapi: 3.0.0
info:
  title: GameBase Communication API
  description: This is the REST API used as an communication layer between backend
    and frontend.
  contact:
    url: https://gahr.dev
    email: gamebase@gahr.dev
  version: 2.0.0
externalDocs:
  description: Learn more about GameBase
  url: https://blog.game-base.de
servers:
- url: https://dev.game-base.de
  description: Dev Backend version of REST service
- url: https://game-base.de
  description: Live Backend version of REST service
- url: https://virtserver.swaggerhub.com/GameBase9/gamebase_communication_api/2.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: gameserver
  description: Game server and container management endpoints
- name: auth
  description: Authentication endpoints
paths:
  /gs/status:
    get:
      tags:
      - gameserver
      summary: Query status of all deployments
      operationId: getStatus
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameContainerStatus'
        "404":
          description: Containers' status could not be fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
      - Bearer: []
  /gs/start/{id}:
    get:
      tags:
      - gameserver
      summary: Start a game server/container
      operationId: startContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to start
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Start successful
        "500":
          description: Start failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
      - Bearer: []
  /gs/stop/{id}:
    get:
      tags:
      - gameserver
      summary: Stop a game server/container
      operationId: stopContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to stop
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Stop successful
        "500":
          description: Stop failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
      - Bearer: []
  /gs/restart/{id}:
    get:
      tags:
      - gameserver
      summary: Restart a game server/container
      operationId: restartContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to restart
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Restart successful
        "500":
          description: Restart failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
      - Bearer: []
  /gs/deploy:
    post:
      tags:
      - gameserver
      summary: Deploy a game server based on POST body
      operationId: deployContainer
      requestBody:
        $ref: '#/components/requestBodies/GameContainerDeployment'
      responses:
        "201":
          description: Deployment successful
        "500":
          description: Deployment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        "400":
          description: Invalid input
      security:
      - Bearer: []
  /gs/configure/{id}:
    post:
      tags:
      - gameserver
      summary: Configure a game server based on POST body
      operationId: configureContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to configure
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/GameContainerConfiguration'
      responses:
        "201":
          description: Configuration successful
        "500":
          description: Configuration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        "400":
          description: Invalid input
      security:
      - Bearer: []
  /gs/destroy/{id}:
    delete:
      tags:
      - gameserver
      summary: Delete deployment of game server
      operationId: deleteContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Deletion successful
        "500":
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
      - Bearer: []
  /gs/templates:
    get:
      tags:
      - gameserver
      summary: Get a list of all available game server templates
      operationId: listTemplates
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "503":
          description: Query failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
      - Bearer: []
  /auth/login:
    post:
      tags:
      - auth
      summary: Login a user and return a JWT with the user object
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: Login failed
        "400":
          description: Invalid input
components:
  schemas:
    Status:
      type: string
      default: UNKNOWN
      enum:
      - UNKNOWN
      - RUNNING
      - STOPPED
      - RESTARTING
      - ERROR
    RestartBehavior:
      type: string
      default: none
      enum:
      - none
      - unless-stopped
      - on-failure
      - always
    UserLogin:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: The password of the user
    User:
      required:
      - email
      - fullName
      - token
      type: object
      properties:
        email:
          type: string
          description: Email address of the user
        fullName:
          type: string
          description: The full name of the user
        token:
          type: string
          description: The JWT of the users session
    Exception:
      required:
      - details
      - exception
      type: object
      properties:
        id:
          type: string
          description: ID of container causing this exception
        exception:
          type: string
          description: Short Exception code
        details:
          type: string
          description: Detailed message of issue
    GameContainerStatus:
      type: object
      properties:
        id:
          type: string
          description: ID of game server container
        status:
          $ref: '#/components/schemas/Status'
        configuration:
          $ref: '#/components/schemas/GameContainerConfiguration'
        gameServerDetails:
          $ref: '#/components/schemas/GameServerDetails'
    GameServerDetails:
      type: object
      additionalProperties:
        type: string
      description: Dynamic details by game server monitoring agent
    GameContainerDeployment:
      required:
      - templatePath
      type: object
      properties:
        templatePath:
          type: string
          description: Template path of backend directory that is going to be used
            for game container creation
    GameContainerConfiguration:
      required:
      - details
      - resources.templatePath
      type: object
      properties:
        details:
          $ref: '#/components/schemas/GameContainerConfiguration_details'
        resources:
          $ref: '#/components/schemas/GameContainerConfiguration_resources'
    GameContainerConfiguration_details:
      type: object
      properties:
        serverName:
          type: string
          description: Name of server that will displayed on one's Dashboard
        ownerId:
          type: string
          description: UUID of owner whom this server belongs to
          format: uuid
        description:
          type: string
          description: Short description of server which will be displayed on one's
            Dashboard
      description: General details of server
    GameContainerConfiguration_resources_ports:
      type: object
      properties:
        tcp:
          type: array
          items:
            type: integer
            format: int16
        udp:
          type: array
          items:
            type: integer
            format: int16
      description: Ports to be allocated
    GameContainerConfiguration_resources:
      type: object
      properties:
        templatePath:
          type: string
          description: Template path of backend directory that is going to be used
            for game container creation
        ports:
          $ref: '#/components/schemas/GameContainerConfiguration_resources_ports'
        memory:
          type: integer
          description: Memory to be allocated
          default: -1
        startupArgs:
          type: string
          description: Command with arguments that will be run upon container creation/start
        restartBehavior:
          $ref: '#/components/schemas/RestartBehavior'
        environmentVars:
          type: object
          additionalProperties:
            type: string
          description: Environment variables that configure the game server
  requestBodies:
    UserLogin:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
    GameContainerDeployment:
      description: Game server template which will be used for server creation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameContainerDeployment'
      required: true
    GameContainerConfiguration:
      description: Configuration for game server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameContainerConfiguration'
      required: true
  securitySchemes:
    Bearer:
      type: apiKey
      description: |
        For accessing the API a valid JWT token must be passed in all the queries in
        the 'Authorization' header.
        A valid JWT token is generated by the API and retourned as answer of a call
        to the route /login giving a valid user & password.
        The following syntax must be used in the 'Authorization' header :
            Bearer xxxxxx.yyyyyyy.zzzzzz
      name: Authorization
      in: header
