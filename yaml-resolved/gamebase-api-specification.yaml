openapi: 3.0.0
info:
  title: GameBase Communication API
  description: This is the REST API used as an communication layer between backend
    and frontend.
  contact:
    url: https://gahr.dev
    email: gamebase@gahr.dev
  version: 1.1.0
externalDocs:
  description: Learn more about GameBase
  url: https://blog.game-base.de
servers:
- url: https://api.dev.game-base.de
  description: Dev Backend version of REST service
- url: https://api.game-base.de/
  description: Live Backend version of REST service
tags:
- name: api
  description: REST API v1
paths:
  /api:
    get:
      tags:
      - api
      summary: Query status of all deployments
      operationId: getStatus
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameServerStatus'
        "404":
          description: Containers' status could not be fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
  /api/start/{id}:
    get:
      tags:
      - api
      summary: Start a game server/container
      operationId: startContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to start
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Start successful
        "500":
          description: Start failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
  /api/stop/{id}:
    get:
      tags:
      - api
      summary: Stop a game server/container
      operationId: stopContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to stop
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Stop successful
        "500":
          description: Stop failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
  /api/restart/{id}:
    get:
      tags:
      - api
      summary: Restart a game server/container
      operationId: restartContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to restart
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Restart successful
        "500":
          description: Restart failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
  /api/deploy:
    post:
      tags:
      - api
      summary: Deploy a game server based on POST body
      operationId: deployContainer
      requestBody:
        $ref: '#/components/requestBodies/GameServerDeployTemplate'
      responses:
        "201":
          description: Deployment successful
        "500":
          description: Deployment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        "400":
          description: Invalid input
  /api/configure:
    post:
      tags:
      - api
      summary: Configure a game server based on POST body
      operationId: configureContainer
      requestBody:
        $ref: '#/components/requestBodies/GameServerConfigurationTemplate'
      responses:
        "201":
          description: Configuration successful
        "500":
          description: Configuration failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        "400":
          description: Invalid input
  /api/destroy/{id}:
    delete:
      tags:
      - api
      summary: Delete deployment of game server
      operationId: deleteContainer
      parameters:
      - name: id
        in: path
        description: ID of game server to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Deletion successful
        "500":
          description: Deletion failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
  /api/listimages:
    get:
      tags:
      - api
      summary: Get a list of all available game server images
      operationId: listImages
      responses:
        "200":
          description: Query successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameServerImages'
        "503":
          description: Query failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
components:
  schemas:
    Exception:
      required:
      - details
      - exception
      type: object
      properties:
        id:
          type: string
          description: ID of container causing this exception
        exception:
          type: string
          description: Short Exception code
        details:
          type: string
          description: Detailed message of issue
    GameServerStatus:
      required:
      - gameTag
      - id
      - image
      - ports
      - state
      type: object
      properties:
        id:
          type: string
          description: ID of container
        gameTag:
          type: string
          description: Indentifier of game
        image:
          type: string
          description: Image used in Docker
        state:
          type: array
          items:
            type: string
            default: unknown
            enum:
            - running
            - restarting
            - stopped
            - error
            - unknown
        ports:
          type: array
          description: Ports used by game server
          items:
            type: integer
            format: int16
        slots:
          type: integer
          description: Max. players allowed
        playerCount:
          type: integer
          description: Current players on server
        map:
          type: string
        mapRotation:
          type: array
          items:
            type: string
    GameServerDeployTemplate:
      required:
      - image
      - ownerId
      type: object
      properties:
        image:
          type: string
          description: Docker image of game server
        ownerId:
          type: string
          description: UUID of owner whom this server belongs to
          format: uuid
    GameServerConfigurationTemplate:
      required:
      - details
      - resources.image
      type: object
      properties:
        details:
          $ref: '#/components/schemas/GameServerConfigurationTemplate_details'
        resources:
          $ref: '#/components/schemas/GameServerConfigurationTemplate_resources'
    GameServerImages:
      type: object
      properties:
        images:
          type: array
          description: List of images
          items:
            type: string
    GameServerConfigurationTemplate_details:
      type: object
      properties:
        serverName:
          type: string
          description: Name of server that will displayed on one's Dashboard
        ownerId:
          type: string
          description: UUID of owner whom this server belongs to
          format: uuid
        description:
          type: string
          description: Short description of server which will be displayed on one's
            Dashboard
      description: General details of server
    GameServerConfigurationTemplate_resources_ports:
      type: object
      properties:
        tcp:
          type: array
          items:
            type: integer
            format: int16
        udp:
          type: array
          items:
            type: integer
            format: int16
      description: Ports to be allocated
    GameServerConfigurationTemplate_resources:
      type: object
      properties:
        image:
          type: string
          description: Docker image
        ports:
          $ref: '#/components/schemas/GameServerConfigurationTemplate_resources_ports'
        memory:
          type: integer
          description: Memory to be allocated
          default: -1
        startupArgs:
          type: string
          description: Command with arguments that will be run upon container creation/start
        restartBehavior:
          type: array
          items:
            type: string
            default: none
            enum:
            - none
            - unless-stopped
            - on-failure
            - always
  requestBodies:
    GameServerDeployTemplate:
      description: Game server template which will be used for server creation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameServerDeployTemplate'
      required: true
    GameServerConfigurationTemplate:
      description: Configuration for game server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameServerConfigurationTemplate'
      required: true
